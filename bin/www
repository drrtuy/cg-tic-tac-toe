#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var gameModel = require('../logic');
var debug = require('debug')('cg-tic-tack-toe:server');
var http = require('http');
var logger = require('../logger');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * socket.io
 */
var io = require('socket.io')(server);
io.on('connection', function (socket) {
  var turnCounter = gameModel.turn;
  //socket.join('menu');
  /*setInterval(function(){
    if(gameModel.turnCounter != turnCounter)
    {
        //socket.emit('ping', gameModel.ping());
        turnCounter = gameModel.turnCounter;
    }
  }, 1000);*/

  socket.on('turn_up', function(data) {
    logger.debug('incTurn()');
    gameModel.incTurn(); });

  socket.on('print', function () {
    socket.emit('printOut', gameModel);
  });

  socket.on('get player id', function (msg) {
    //logger.debug('get player id',3);
    logger.debug(msg,3);
    //TODO add socket id to the list for auth checks
    socket.emit('playerid', gameModel.getPlayerId(msg));
  });

  socket.on('turn', function(data) {
      logger.debug(data, 3);
      var msg = gameModel.turn(data);
      if (typeof msg != 'undefined') {
          logger.debug(msg, 3);
          io.sockets.emit('turn ends', msg);
      } else {
        // TODO remove hardcoded id boundaries
        if (gameModel.actionAllowed(data))
          io.sockets.emit('player action', { 'playerid': data.playerid });
      }

  });

  socket.on('get state', function () {
      var msg = gameModel.getCurrentState();
      logger.debug('socket state():', 1);
      socket.emit('current state', msg);
    });

  socket.on('reset', function () {
    gameModel.resetState();
  });
  socket.on('start', function() {
      gameModel.start();
   });
});

//menu room
var menuSocket = io.of('/');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
